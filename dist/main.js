"use strict";(self.webpackChunkwebcomponents_hello_world=self.webpackChunkwebcomponents_hello_world||[]).push([[179],{759:(n,t,e)=>{e.d(t,{Z:()=>s});var o=e(537),i=e.n(o),a=e(645),r=e.n(a)()(i());r.push([n.id,"html{background-color:#eee;font-size:16px;padding:0;margin:0}body{padding:0;margin:0}*{box-sizing:border-box}\n","",{version:3,sources:["webpack://./style.scss"],names:[],mappings:"AAAA,KACI,qBAAsB,CACtB,cAAe,CACf,SAAU,CACV,QAAS,CACZ,KAGG,SAAU,CACV,QAAS,CACZ,EAGG,qBAAsB",sourcesContent:["html {\n    background-color: #eee;\n    font-size: 16px;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    padding: 0;\n    margin: 0;\n}\n\n* {\n    box-sizing: border-box;\n}\n"],sourceRoot:""}]);const s=r},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(r[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);o&&r[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),t.push(d))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(i," */"),r=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(r).concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var a={},r=[],s=0;s<n.length;s++){var c=n[s],l=o.base?c[0]+o.base:c[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var u=e(p),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var m=i(h,o);o.byIndex=s,t.splice(s,0,{identifier:p,updater:m,references:1})}r.push(p)}return r}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var a=o(n=n||[],i=i||{});return function(n){n=n||[];for(var r=0;r<a.length;r++){var s=e(a[r]);t[s].references--}for(var c=o(n,i),l=0;l<a.length;l++){var d=e(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,i&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},207:(n,t,e)=>{const o=[{id:1,type:"text",name:"Надпись на капоте",defaultValue:""},{id:2,type:"checkbox",name:"Карбон",defaultValue:!1},{id:3,type:"select",name:"Движок",variants:[{value:"V6"},{value:"V8"},{value:"Blink"},{value:"Presto"}],defaultValue:{value:""}},{id:4,type:"text",name:"Надпись на двери",defaultValue:""}],i=[{id:1,name:"Sport",options:[{typeId:1,value:"Хулиган"},{typeId:2,value:!0},{typeId:3,value:{value:"V6"}},{typeId:4,value:"May laif may ruls"}]},{id:2,name:"Prestige",options:[{typeId:1,value:"Илита"},{typeId:2,value:!1},{typeId:3,value:{value:"V6"}},{typeId:4,value:"Зато не в кредит"}]}],a=document.createElement("template");a.innerHTML='\n    <div class="app">\n        <h1 class="header">ConfigurationMagic</h1>\n\n        <div class="container">\n            <div class="column">\n                <slot name="configuration-list"></slot>\n\n                <button id="create-configuration-button" class="button button--type-primary">\n                    + New Configuration\n                </button>\n\n                <button id="create-optiontype-button" type="button" class="button button--type-secondary">\n                    + New Configuration Option\n                </button>\n            </div>\n\n            <div class="column" id="configuration-form-wrapper">\n                <slot name="configuration-form"></slot>\n            </div>\n\n            <div class="column" id="configuration-optiontype-form-wrapper">\n                <slot name="configuration-optiontype-form"></slot>\n            </div>\n        </div>\n    </div>\n';class r extends HTMLElement{constructor(){super(...arguments),this.configurations=[],this.optionsTypes=[],this.state={editingConfiguration:void 0,isFetching:!0,mode:"idle"}}setState(n){this.state=Object.assign(Object.assign({},this.state),n),this.updateDOM()}connectedCallback(){this.attachShadow({mode:"open"}),new Promise((n=>{setTimeout((()=>{n({configurations:i.map((n=>Object.assign(Object.assign({},n),{options:n.options.map((n=>Object.assign(Object.assign({},n),{type:o.find((t=>t.id===n.typeId))})))}))),optionsTypes:o})}),256)})).then((n=>{this.configurations=n.configurations,this.optionsTypes=n.optionsTypes,this.setState({isFetching:!1}),this.render()})),this.render()}initControls(){this.controls={buttonCreateOptiontype:this.shadowRoot.querySelector("#create-optiontype-button"),buttonCreateConfiguration:this.shadowRoot.querySelector("#create-configuration-button"),configurationFormWrapper:this.shadowRoot.querySelector("#configuration-form-wrapper"),configurationOptionTypeFormWrapper:this.shadowRoot.querySelector("#configuration-optiontype-form-wrapper")}}setupStyles(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    font-family: Monospace, Verdana, Arial, Sans-Serif;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n    .app {\n        max-width: 960px;\n        margin: 1rem auto 2rem;\n    }\n\n    .container {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-gap: 10px;\n    }\n\n    .header {\n        color: #444;\n        font-size: 1.6rem;\n        margin: 1rem 0 2rem;\n    }\n    ",this.shadowRoot.appendChild(n)}handleConfigurationSave(n){const t=n.detail;t.id&&(this.configurations=this.configurations.map((n=>Object.assign(Object.assign({},n),n.id===t.id?t:{}))),this.controls.configurationList.setAttribute("configurations",JSON.stringify(this.configurations))),this.setState({mode:"idle"}),this.updateDOM()}handleConfigurationCancel(){this.setState({editingConfiguration:void 0,mode:"idle"})}handleOptionTypeSave(n){this.optionsTypes.push(Object.assign(Object.assign({},n.detail),{id:this.optionsTypes.length})),this.configurations=this.configurations.map((t=>Object.assign(Object.assign({},t),{options:[...t.options,{type:n.detail,value:n.detail.defaultValue,typeId:n.detail.id}]}))),this.setState({mode:"idle"})}handleOptionTypeCancel(){this.configurationOptionTypeForm.removeAttribute("visible"),this.setState({mode:"idle"})}handleCreateConfigurationDraft(){if(this.state.isFetching)return!1;this.configurations.push({id:this.configurations.length+1,name:`Draft ${this.configurations.length}`,options:this.optionsTypes.map((n=>({value:n.defaultValue,typeId:n.id,type:n,variants:"select"===n.type?[]:void 0})))}),this.controls.configurationList.setAttribute("configurations",JSON.stringify(this.configurations)),this.setState({mode:"edit-conf"})}handleCreateOptionType(){this.setState({mode:"edit-option-type"})}handleEditConfigurationClick(n){this.setState({editingConfiguration:n.detail,mode:"edit-conf"}),this.controls.configurationForm.setAttribute("configuration",JSON.stringify(this.state.editingConfiguration))}initEvents(){this.controls.buttonCreateConfiguration.addEventListener("click",this.handleCreateConfigurationDraft.bind(this)),this.controls.buttonCreateOptiontype.addEventListener("click",this.handleCreateOptionType.bind(this)),this.configurationOptionTypeForm.addEventListener("save",this.handleOptionTypeSave.bind(this)),this.configurationOptionTypeForm.addEventListener("cancel",this.handleOptionTypeCancel.bind(this)),this.controls.configurationList.addEventListener("click-edit",this.handleEditConfigurationClick.bind(this)),this.controls.configurationForm.addEventListener("save",this.handleConfigurationSave.bind(this)),this.controls.configurationForm.addEventListener("cancel",this.handleConfigurationCancel.bind(this))}render(){this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(a.content.cloneNode(!0)),this.initControls(),this.configurationOptionTypeForm=document.createElement("configuration-optiontype-form"),this.controls.configurationForm=document.createElement("configuration-form"),this.controls.configurationList=document.createElement("configuration-list"),this.shadowRoot.querySelector('slot[name="configuration-form"]').appendChild(this.controls.configurationForm),this.shadowRoot.querySelector('slot[name="configuration-list"]').appendChild(this.controls.configurationList),this.shadowRoot.querySelector('slot[name="configuration-optiontype-form"]').appendChild(this.configurationOptionTypeForm),this.initEvents(),this.setupStyles(),this.updateDOM()}updateDOM(){switch(this.controls.configurationForm.setAttribute("configuration",JSON.stringify(this.state.editingConfiguration)),this.controls.configurationList.setAttribute("configurations",JSON.stringify(this.configurations)),this.controls.configurationList.setAttribute("optionsTypes",JSON.stringify(this.optionsTypes)),this.state.mode){case"edit-conf":this.controls.configurationFormWrapper.style.display="",this.controls.configurationOptionTypeFormWrapper.style.display="none";break;case"edit-option-type":this.controls.configurationFormWrapper.style.display="none",this.controls.configurationOptionTypeFormWrapper.style.display="";break;case"idle":this.controls.configurationFormWrapper.style.display="none",this.controls.configurationOptionTypeFormWrapper.style.display="none"}}}const s=document.createElement("template");s.innerHTML='\n    <div class="form-wrapper">\n        <h3>\n            <slot name="name"></slot>\n        </h3>\n        <form>\n            <label class="form-control">\n                <div class="name">\n                    Название\n                </div>\n                <div class="value">\n                    <input\n                        name="name"\n                        value=""\n                        pattern=".{2,255}"\n                        required\n                    />\n                </div>\n            </label>\n\n            <slot name="options"></slot>\n\n            <button id="save-button" type="submit" class="button button--type-primary">\n                + Save\n            </button>\n\n            <button id="cancel-button" type="button" class="button button--type-secondary">\n                Cancel\n            </button>\n        </form>\n    </div>\n';class c extends HTMLElement{constructor(){super(...arguments),this.controls={buttonCancel:void 0},this.optionControlByType=new Map([["checkbox","configuration-form-option-checkbox"],["select","configuration-form-option-select"],["text","configuration-form-option-text"]])}static get observedAttributes(){return["configuration"]}connectedCallback(){this.attachShadow({mode:"open"}),this.setupData(),this.render()}initControls(){this.controls={buttonCancel:this.shadowRoot.querySelector("#cancel-button")},this.controls.buttonCancel.addEventListener("click",(()=>{this.dispatchEvent(new CustomEvent("cancel",{composed:!0}))}))}setupData(){try{this.configuration=JSON.parse(this.getAttribute("configuration"))}catch(n){this.configuration=void 0}}handleNameChange(n){this.configuration.name=n.target.value}handleOptionChange(n){this.dispatchEvent(new CustomEvent("configuration-option-change",{detail:n.detail,composed:!0})),this.configuration.options=this.configuration.options.map((t=>Object.assign(Object.assign({},t),t.type.name===n.detail.type.name?{value:n.detail.value}:{})))}handleSubmit(n){this.dispatchEvent(new CustomEvent("save",{detail:n,composed:!0}))}initEvents(){this.shadowRoot.querySelector("form").addEventListener("submit",(n=>{n.preventDefault(),this.handleSubmit(this.configuration)}))}setupStyles(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    font-family: Monospace, Verdana, Arial, Sans-Serif;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n    .app {}\n    ",this.shadowRoot.appendChild(n)}render(){if(!this.configuration||!this.shadowRoot)return;this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(s.content.cloneNode(!0)),this.shadowRoot.querySelector('slot[name="name"]').innerHTML=this.configuration.name;const n=this.shadowRoot.querySelector('input[name="name"]');n.value=this.configuration.name,n.addEventListener("change",this.handleNameChange.bind(this)),n.addEventListener("input",this.handleNameChange.bind(this));const t=this.shadowRoot.querySelector('slot[name="options"]');this.configuration.options.filter((n=>this.optionControlByType.has(n.type.type))).forEach((n=>{const e=document.createElement(this.optionControlByType.get(n.type.type));e.setAttribute("option",JSON.stringify(n)),e.addEventListener("change",this.handleOptionChange.bind(this)),t.appendChild(e)})),this.initEvents(),this.initControls(),this.setupStyles()}attributeChangedCallback(n,t,e){this.setupData(),this.render()}}const l=document.createElement("template");l.innerHTML='\n    <label class="form-control">\n        <div class="name" id="name"></div>\n        <div class="value">\n            <input type="checkbox" />\n        </div>\n    </label>\n';class d extends HTMLElement{connectedCallback(){this.attachShadow({mode:"open"});try{this.option=JSON.parse(this.getAttribute("option"))}catch(n){this.option=void 0}this.render()}initEvents(){this.shadowRoot.querySelector("input").addEventListener("change",(n=>{this.handleChange(n.target.checked)}))}handleChange(n){this.dispatchEvent(new CustomEvent("change",{detail:Object.assign(Object.assign({},this.option),{value:n}),composed:!0}))}setupStyles(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    font-family: Monospace, Verdana, Arial, Sans-Serif;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n    .app {\n        border: 1px dotted #0ff;\n    }\n    ",this.shadowRoot.appendChild(n)}render(){if(this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(l.content.cloneNode(!0)),this.option){this.shadowRoot.querySelector("#name").innerHTML=this.option.type.name;const n=this.shadowRoot.querySelector("input");this.option.value?n.setAttribute("checked","true"):n.removeAttribute("checked")}this.initEvents(),this.setupStyles()}}const p=document.createElement("template");p.innerHTML='\n    <label class="form-control">\n        <div class="name">\n            <slot name="name"></slot>\n        </div>\n        <div class="value">\n            <select value=""></select>\n        </div>\n    </label>\n';class u extends HTMLElement{connectedCallback(){this.attachShadow({mode:"open"});try{this.option=JSON.parse(this.getAttribute("option"))}catch(n){this.option=void 0}this.render()}initEvents(){this.shadowRoot.querySelector("select").addEventListener("change",(n=>{this.handleChange(n.target.value)}))}handleChange(n){this.dispatchEvent(new CustomEvent("change",{detail:Object.assign(Object.assign({},this.option),{value:{value:n}}),composed:!0}))}setupStyles(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    font-family: Monospace, Verdana, Arial, Sans-Serif;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n    .app {\n        border: 1px dotted #0ff;\n    }\n    ",this.shadowRoot.appendChild(n)}render(){if(this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(p.content.cloneNode(!0)),this.option){this.shadowRoot.querySelector('slot[name="name"]').innerHTML=this.option.type.name;const n=this.shadowRoot.querySelector("select");n.value=this.option.value.value;const t=document.createElement("option");t.value="",t.innerText="Not selected",n.appendChild(t),this.option.type.variants.forEach((t=>{const e=document.createElement("option");e.value=t.value,e.innerText=t.value,t.value===this.option.value.value?e.setAttribute("selected","true"):e.removeAttribute("selected"),n.appendChild(e)}))}this.initEvents(),this.setupStyles()}}const h=document.createElement("template");h.innerHTML='\n    <label class="form-control">\n        <div class="name" id="name"></div>\n        <div class="value">\n            <input\n                value=""\n                pattern=".{2,255}"\n                required\n            />\n        </div>\n    </label>\n';class m extends HTMLElement{connectedCallback(){this.attachShadow({mode:"open"});try{this.option=JSON.parse(this.getAttribute("option"))}catch(n){this.option=void 0}this.render()}handleChange(n){this.dispatchEvent(new CustomEvent("change",{detail:Object.assign(Object.assign({},this.option),{value:n}),composed:!0}))}setupStyles(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    font-family: Monospace, Verdana, Arial, Sans-Serif;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n    ",this.shadowRoot.appendChild(n)}render(){if(this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(h.content.cloneNode(!0)),this.option){this.shadowRoot.querySelector("#name").innerHTML=this.option.type.name;const n=this.shadowRoot.querySelector("input");n.value=this.option.value,n.addEventListener("change",(n=>{this.handleChange(n.target.value)})),n.addEventListener("input",(n=>{this.handleChange(n.target.value)}))}this.setupStyles()}}const b=document.createElement("template");b.innerHTML='\n    <div class="item">\n        <div class="header" id="header">\n            <div>\n                #<span id="id"></span> <span id="name"></span>\n            </div>\n            <div>\n                <button id="edit-button" class="button button--type-secondary">Edit Configuration</button>\n                <button id="expand-toggler" class="button button--type-secondary">Hide/Show Details</button>\n            </div>\n        </div>\n        <div class="options" id="options"></div>\n    </div>\n';class g extends HTMLElement{constructor(){super(...arguments),this.isOpened=!1,this.state={isOpened:!0,configuration:void 0}}static get observedAttributes(){return["configuration","opened"]}setState(n){this.state=Object.assign(Object.assign({},this.state),n),this.updateDOM()}connectedCallback(){this.attachShadow({mode:"open"}),this.configuration=JSON.parse(this.getAttribute("configuration")),this.isOpened="true"===this.getAttribute("opened"),this.render()}handleClickEdit(){this.dispatchEvent(new CustomEvent("click-edit",{detail:this.configuration,composed:!0})),this.isOpened||this.handleClickVisibility()}handleClickVisibility(){this.isOpened=!this.isOpened,this.dispatchEvent(new CustomEvent(this.isOpened?"open":"close",{detail:this.configuration.id,composed:!0})),this.render()}addEventListeners(){this.shadowRoot.getElementById("edit-button").addEventListener("click",this.handleClickEdit.bind(this)),this.shadowRoot.getElementById("expand-toggler").addEventListener("click",this.handleClickVisibility.bind(this))}setupStyles(){const n=document.createElement("style");n.textContent=function(n){return`\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    font-family: Monospace, Verdana, Arial, Sans-Serif;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n    .item {\n        border-bottom: 1px solid #ccc;\n        margin: 0;\n    }\n\n    .item:hover .header {\n        background-color: #ccc;\n    }\n\n    .header {\n        align-items: center;\n        background-color: #ddd;\n        border: 0;\n        color: #222;\n        display: flex;\n        justify-content: space-between;\n        font-size: 1.2rem;\n        padding: 4px 8px;\n        width: 100%;\n    }\n\n    .options {\n        background-color: #eee;\n        display: ${n.isOpened?"block":"none"};\n    }\n    `}({isOpened:this.isOpened}),this.shadowRoot.appendChild(n)}render(){this.shadowRoot&&(this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(b.content.cloneNode(!0)),this.updateDOM(),this.setupStyles(),this.addEventListeners())}updateDOM(){this.shadowRoot.querySelector("#id").innerHTML=this.configuration.id.toString(),this.shadowRoot.querySelector("#name").innerHTML=this.configuration.name;const n=this.shadowRoot.querySelector("#options");this.configuration.options.forEach((t=>{const e=document.createElement("configuration-option");e.setAttribute("option",JSON.stringify(t)),n.appendChild(e)})),this.shadowRoot.getElementById("expand-toggler").innerHTML=this.isOpened?"Hide Details":"Show Details"}attributeChangedCallback(n,t,e){"configuration"===n?(this.configuration=JSON.parse(e),this.render()):"opened"===n&&(this.isOpened="true"===e,this.render())}}const f=document.createElement("template");f.innerHTML='\n    <div class="list" id="list"></div>\n';class y extends HTMLElement{constructor(){super(...arguments),this.configurations=[],this.optionsTypes=[],this.configurationItems={}}static get observedAttributes(){return["configurations"]}connectedCallback(){this.attachShadow({mode:"open"}),this.name=this.getAttribute("name"),this.configurations=JSON.parse(this.getAttribute("configurations")),this.optionsTypes=JSON.parse(this.getAttribute("optionsTypes")),this.render()}setupStyles(){const n=document.createElement("style");n.textContent="\n  \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    font-family: Monospace, Verdana, Arial, Sans-Serif;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n  .list {\n    border: 1px solid #999;\n    border-radius: 4px;\n    box-shadow: 2px 2px 4px #aaa;\n    margin: 0 0 16px;\n    overflow: hidden;\n  }\n  ",this.shadowRoot.appendChild(n)}handleEditClick(n){this.dispatchEvent(new CustomEvent(n.type,{detail:n.detail,composed:!0}))}render(){this.shadowRoot&&(this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(f.content.cloneNode(!0)),this.listElement=this.shadowRoot.querySelector("#list"),this.setupStyles(),this.updateDOM())}updateDOM(){this.listElement&&(this.configurations||[]).forEach((n=>{if(n.id in this.configurationItems)this.configurationItems[n.id].setAttribute("configuration",JSON.stringify(n));else{const t=document.createElement("configuration-item");t.setAttribute("configuration",JSON.stringify(n)),t.setAttribute("key",n.id.toString()),t.addEventListener("click-edit",this.handleEditClick.bind(this)),this.listElement.appendChild(t),this.configurationItems[n.id]=t}}))}attributeChangedCallback(n,t,e){"configurations"===n&&(this.configurations=JSON.parse(e),this.updateDOM())}}const v=document.createElement("template");v.innerHTML='\n    <div class="item">\n        <div class="name" id="name"></div>\n        <div class="value" id="value"></div>\n    </div>\n';class C extends HTMLElement{connectedCallback(){this.attachShadow({mode:"open"}),this.option=JSON.parse(this.getAttribute("option")),this.render()}setupStyles(){const n=document.createElement("style");n.textContent="\n  \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    font-family: Monospace, Verdana, Arial, Sans-Serif;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n  .item {\n    display: flex;\n    justify-content: center;\n  }\n\n  .name {\n    color: #444;\n    padding: 0 0.5rem 0 0;\n    text-align: right;\n    width: 50%;\n  }\n\n  .value {\n    color: #222;\n    padding: 0 0 0 0.5rem;\n    text-align: left;\n    width: 50%;\n  }\n  ",this.shadowRoot.appendChild(n)}render(){this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(v.content.cloneNode(!0)),this.shadowRoot.querySelector("#name").innerHTML=this.option.type.name;const n=this.shadowRoot.querySelector("#value");switch(this.option.type.type){case"checkbox":n.innerHTML=this.option.value?"Да":"Нет";break;case"select":n.innerHTML=this.option.value.value;break;case"text":n.innerHTML=this.option.value.toString()}this.setupStyles()}}const x=document.createElement("template");x.innerHTML='\n    <div>\n        <h3>New Configuration Option</h3>\n        <form>\n            <label class="form-control">\n                <div class="name">\n                    Name\n                </div>\n                <div class="value">\n                    <input\n                        name="name"\n                        value=""\n                        pattern=".{2,255}"\n                        required\n                    />\n                </div>\n            </label>\n\n            <label class="form-control">\n                <div class="name">\n                    Type\n                </div>\n                <div class="value">\n                    <select name="type">\n                        <option value="text">Текст</option>\n                        <option value="checkbox">Чекбокс</option>\n                        <option value="select">Выпадающий список</option>\n                    </select>\n                </div>\n            </label>\n\n            <label class="form-control" id="variants">\n                <div class="name">\n                    Варианты\n                </div>\n                <div class="value">\n                    <input\n                        name="variants"\n                        value=""\n                        pattern=".{2,255}"\n                    />\n                </div>\n            </label>\n\n            <button id="save-button" type="submit" class="button button--type-primary">\n                + Save\n            </button>\n\n            <button id="cancel-button" type="button" class="button button--type-secondary">\n                Cancel\n            </button>\n        </form>\n    </div>\n';class w extends HTMLElement{constructor(){super(...arguments),this.optionType={id:void 0,type:"text",name:"Option Type",defaultValue:""},this.controls={buttonCancel:void 0,form:void 0,name:void 0,type:void 0,variants:void 0,variantsWrapper:void 0}}static get observedAttributes(){return["visible"]}connectedCallback(){this.attachShadow({mode:"open"}),this.render()}handleNameChange(n){this.optionType.name=n.target.value}handleTypeChange(n){this.optionType.type=n.target.value,this.render()}handleVariantsChange(n){"select"===this.optionType.type&&(this.optionType.variants=n.target.value.split(",").map((n=>({value:n}))))}handleOptionChange(n){this.dispatchEvent(new CustomEvent("configuration-option-change",{detail:n.detail,composed:!0}))}handleSubmit(n){this.dispatchEvent(new CustomEvent("save",{detail:Object.assign(Object.assign(Object.assign(Object.assign({},n),"checkbox"===this.optionType.type?{defaultValue:!1}:{}),"text"===this.optionType.type?{defaultValue:""}:{}),"select"===this.optionType.type?{defaultValue:{value:""},variants:this.optionType.variants}:{variants:void 0}),composed:!0})),this.dispatchEvent(new CustomEvent("cancel",{composed:!0}))}initControls(){this.controls={buttonCancel:this.shadowRoot.querySelector("#cancel-button"),name:this.shadowRoot.querySelector('input[name="name"]'),variants:this.shadowRoot.querySelector('input[name="variants"]'),variantsWrapper:this.shadowRoot.querySelector("#variants"),type:this.shadowRoot.querySelector('select[name="type"]'),form:this.shadowRoot.querySelector("form")},this.controls.form.addEventListener("submit",(n=>{n.preventDefault(),this.handleSubmit(this.optionType)})),this.controls.name.addEventListener("change",this.handleNameChange.bind(this)),this.controls.type.addEventListener("change",this.handleTypeChange.bind(this)),this.controls.variants.addEventListener("change",this.handleVariantsChange.bind(this)),this.controls.buttonCancel.addEventListener("click",(()=>{this.dispatchEvent(new CustomEvent("cancel",{composed:!0}))}))}setupStyles(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    font-family: Monospace, Verdana, Arial, Sans-Serif;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n    ",this.shadowRoot.appendChild(n)}render(){this.optionType&&this.shadowRoot&&(this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(x.content.cloneNode(!0)),this.initControls(),this.controls.name.value=this.optionType.name,this.controls.type.value=this.optionType.type,"select"===this.optionType.type?this.controls.variantsWrapper.style.display="":this.controls.variantsWrapper.style.display="none",this.setupStyles())}}var S=e(379),E=e.n(S),k=e(795),T=e.n(k),O=e(569),A=e.n(O),L=e(565),R=e.n(L),M=e(216),H=e.n(M),N=e(589),q=e.n(N),j=e(759),V={};V.styleTagTransform=q(),V.setAttributes=R(),V.insert=A().bind(null,"head"),V.domAPI=T(),V.insertStyleElement=H(),E()(j.Z,V),j.Z&&j.Z.locals&&j.Z.locals;try{customElements.define("test-app",r),customElements.define("configuration-form-option-checkbox",d),customElements.define("configuration-form-option-select",u),customElements.define("configuration-form-option-text",m),customElements.define("configuration-form",c),customElements.define("configuration-item",g),customElements.define("configuration-list",y),customElements.define("configuration-option",C),customElements.define("configuration-optiontype-form",w)}catch(n){console.warn(n);const t=document.createElement("h2");t.innerText="This browser doesnt supports web components",document.body.appendChild(t)}}},n=>{n(n.s=207)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,