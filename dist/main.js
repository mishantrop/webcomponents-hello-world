"use strict";(self.webpackChunkwebcomponents_hello_world=self.webpackChunkwebcomponents_hello_world||[]).push([[179],{759:(n,t,e)=>{e.d(t,{Z:()=>s});var o=e(537),i=e.n(o),a=e(645),r=e.n(a)()(i());r.push([n.id,"html{background-color:#eee;font-size:16px;padding:0;margin:0}body{padding:0;margin:0}*{box-sizing:border-box}\n","",{version:3,sources:["webpack://./style.scss"],names:[],mappings:"AAAA,KACI,qBAAsB,CACtB,cAAe,CACf,SAAU,CACV,QAAS,CACZ,KAGG,SAAU,CACV,QAAS,CACZ,EAGG,qBAAsB",sourcesContent:["html {\n    background-color: #eee;\n    font-size: 16px;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    padding: 0;\n    margin: 0;\n}\n\n* {\n    box-sizing: border-box;\n}\n"],sourceRoot:""}]);const s=r},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(r[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);o&&r[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),t.push(d))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(i," */"),r=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(r).concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var a={},r=[],s=0;s<n.length;s++){var l=n[s],c=o.base?l[0]+o.base:l[0],d=a[c]||0,p="".concat(c," ").concat(d);a[c]=d+1;var u=e(p),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var m=i(h,o);o.byIndex=s,t.splice(s,0,{identifier:p,updater:m,references:1})}r.push(p)}return r}function i(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,i){var a=o(n=n||[],i=i||{});return function(n){n=n||[];for(var r=0;r<a.length;r++){var s=e(a[r]);t[s].references--}for(var l=o(n,i),c=0;c<a.length;c++){var d=e(a[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,i&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},207:(n,t,e)=>{const o=[{id:1,type:"text",name:"Надпись на капоте",defaultValue:""},{id:2,type:"checkbox",name:"Карбон",defaultValue:!1},{id:3,type:"select",name:"Движок",variants:[{value:"V6"},{value:"V8"},{value:"Blink"},{value:"Presto"}],defaultValue:{value:""}},{id:4,type:"text",name:"Надпись на двери",defaultValue:""}],i=[{id:1,name:"Sport",options:[{typeId:1,value:"Хулиган"},{typeId:2,value:!0},{typeId:3,value:{value:"V6"}},{typeId:4,value:"May laif may ruls"}]},{id:2,name:"Prestige",options:[{typeId:1,value:"Илита"},{typeId:2,value:!1},{typeId:3,value:{value:"V6"}},{typeId:4,value:"Зато не в кредит"}]}],a=document.createElement("template");a.innerHTML='\n    <div class="app">\n        <h1 class="header">ConfigurationMagic</h1>\n\n        <div class="container">\n            <div class="column">\n                <slot name="configuration-list"></slot>\n\n                <button id="create-configuration-button" class="button button--type-primary">\n                    + New Configuration\n                </button>\n\n                <button id="create-optiontype-button" type="button" class="button button--type-secondary">\n                    + New Configuration Option\n                </button>\n            </div>\n\n            <div class="column" id="configuration-form-wrapper">\n                <slot name="configuration-form"></slot>\n            </div>\n\n            <div class="column" id="configuration-optiontype-form-wrapper">\n                <slot name="configuration-optiontype-form"></slot>\n            </div>\n        </div>\n    </div>\n';class r extends HTMLElement{constructor(){super(...arguments),this.configurations=[],this.optionsTypes=[],this.state={isFetching:!0,mode:"idle"}}connectedCallback(){this.attachShadow({mode:"open"}),new Promise((n=>{setTimeout((()=>{n({configurations:i.map((n=>Object.assign(Object.assign({},n),{options:n.options.map((n=>Object.assign(Object.assign({},n),{type:o.find((t=>t.id===n.typeId))})))}))),optionsTypes:o})}),256)})).then((n=>{this.configurations=n.configurations,this.optionsTypes=n.optionsTypes,this.state.isFetching=!1,this.render()})),this.render()}initControls(){this.controls={buttonCreateOptiontype:this.shadowRoot.querySelector("#create-optiontype-button"),buttonCreateConfiguration:this.shadowRoot.querySelector("#create-configuration-button"),configurationFormWrapper:this.shadowRoot.querySelector("#configuration-form-wrapper"),configurationOptionTypeFormWrapper:this.shadowRoot.querySelector("#configuration-optiontype-form-wrapper")}}addStyle(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n    .app {\n        max-width: 960px;\n        margin: 1rem auto 2rem;\n    }\n\n    .container {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-gap: 10px;\n    }\n\n    .header {\n        color: #444;\n        font-size: 1.6rem;\n        margin: 1rem 0 2rem;\n    }\n    ",this.shadowRoot.appendChild(n)}handleConfigurationSave(n){const t=n.detail;t.id&&(this.configurations=this.configurations.map((n=>Object.assign(Object.assign({},n),n.id===t.id?t:{}))),this.render()),this.state.mode="idle",this.render()}handleConfigurationCancel(){this.state.mode="idle",this.editingConfiguration=void 0,this.render()}handleOptionTypeSave(n){this.optionsTypes.push(Object.assign(Object.assign({},n.detail),{id:this.optionsTypes.length})),this.configurations=this.configurations.map((t=>Object.assign(Object.assign({},t),{options:[...t.options,{type:n.detail,value:n.detail.defaultValue,typeId:n.detail.id}]}))),this.state.mode="idle",this.render()}handleOptionTypeCancel(){this.configurationOptionTypeForm.removeAttribute("visible"),this.state.mode="idle",this.render()}handleCreateConfigurationDraft(){if(this.state.isFetching)return!1;this.state.mode="edit-conf",this.configurations.push({id:this.configurations.length+1,name:`Draft ${this.configurations.length}`,options:this.optionsTypes.map((n=>({value:n.defaultValue,typeId:n.id,type:n,variants:"select"===n.type?[]:void 0})))}),this.render()}handleCreateOptionType(){this.state.mode="edit-option-type",this.render()}initEvents(){this.controls.buttonCreateConfiguration.addEventListener("click",this.handleCreateConfigurationDraft.bind(this)),this.controls.buttonCreateOptiontype.addEventListener("click",this.handleCreateOptionType.bind(this)),this.configurationOptionTypeForm.addEventListener("save",this.handleOptionTypeSave.bind(this)),this.configurationOptionTypeForm.addEventListener("cancel",this.handleOptionTypeCancel.bind(this))}render(){this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(a.content.cloneNode(!0)),this.initControls(),this.configurationOptionTypeForm=document.createElement("configuration-optiontype-form");const n=document.createElement("configuration-form");switch(n.setAttribute("configuration",JSON.stringify(this.editingConfiguration)),n.addEventListener("save",this.handleConfigurationSave.bind(this)),n.addEventListener("cancel",this.handleConfigurationCancel.bind(this)),this.controls.configurationList=document.createElement("configuration-list"),this.controls.configurationList.setAttribute("configurations",JSON.stringify(this.configurations)),this.controls.configurationList.setAttribute("optionsTypes",JSON.stringify(this.optionsTypes)),this.controls.configurationList.addEventListener("click-edit",(t=>{this.editingConfiguration=t.detail,n.setAttribute("configuration",JSON.stringify(this.editingConfiguration)),this.state.mode="edit-conf",this.render()})),this.shadowRoot.querySelector('slot[name="configuration-form"]').appendChild(n),this.shadowRoot.querySelector('slot[name="configuration-list"]').appendChild(this.controls.configurationList),this.shadowRoot.querySelector('slot[name="configuration-optiontype-form"]').appendChild(this.configurationOptionTypeForm),this.initEvents(),this.addStyle(),this.state.mode){case"edit-conf":this.controls.configurationFormWrapper.style.display="",this.controls.configurationOptionTypeFormWrapper.style.display="none";break;case"edit-option-type":this.controls.configurationFormWrapper.style.display="none",this.controls.configurationOptionTypeFormWrapper.style.display="";break;case"idle":this.controls.configurationFormWrapper.style.display="none",this.controls.configurationOptionTypeFormWrapper.style.display="none"}}}const s=document.createElement("template");s.innerHTML='\n    <div class="form-wrapper">\n        <h3>\n            <slot name="name"></slot>\n        </h3>\n        <form>\n            <label class="form-control">\n                <div class="name">\n                    Название\n                </div>\n                <div class="value">\n                    <input name="name" value="" />\n                </div>\n            </label>\n\n            <slot name="options"></slot>\n\n            <button id="save-button" type="submit" class="button button--type-primary">\n                + Save\n            </button>\n\n            <button id="cancel-button" type="button" class="button button--type-secondary">\n                Cancel\n            </button>\n        </form>\n    </div>\n';class l extends HTMLElement{constructor(){super(...arguments),this.controls={buttonCancel:void 0},this.optionControlByType=new Map([["checkbox","configuration-form-option-checkbox"],["select","configuration-form-option-select"],["text","configuration-form-option-text"]])}static get observedAttributes(){return["configuration"]}connectedCallback(){this.attachShadow({mode:"open"}),this.setupData(),this.render()}initControls(){this.controls={buttonCancel:this.shadowRoot.querySelector("#cancel-button")},this.controls.buttonCancel.addEventListener("click",(()=>{this.dispatchEvent(new CustomEvent("cancel",{composed:!0}))}))}setupData(){try{this.configuration=JSON.parse(this.getAttribute("configuration"))}catch(n){this.configuration=void 0}}handleNameChange(n){this.configuration.name=n.target.value}handleOptionChange(n){this.dispatchEvent(new CustomEvent("configuration-option-change",{detail:n.detail,composed:!0})),this.configuration.options=this.configuration.options.map((t=>Object.assign(Object.assign({},t),t.type.name===n.detail.type.name?{value:n.detail.value}:{})))}handleSubmit(n){this.dispatchEvent(new CustomEvent("save",{detail:n,composed:!0}))}initEvents(){this.shadowRoot.querySelector("form").addEventListener("submit",(n=>{n.preventDefault(),this.handleSubmit(this.configuration)}))}addStyle(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n    .app {}\n    ",this.shadowRoot.appendChild(n)}render(){if(!this.configuration||!this.shadowRoot)return;this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(s.content.cloneNode(!0)),this.shadowRoot.querySelector('slot[name="name"]').innerHTML=this.configuration.name;const n=this.shadowRoot.querySelector('input[name="name"]');n.value=this.configuration.name,n.addEventListener("change",this.handleNameChange.bind(this)),n.addEventListener("input",this.handleNameChange.bind(this));const t=this.shadowRoot.querySelector('slot[name="options"]');this.configuration.options.filter((n=>this.optionControlByType.has(n.type.type))).forEach((n=>{const e=document.createElement(this.optionControlByType.get(n.type.type));e.setAttribute("option",JSON.stringify(n)),e.addEventListener("change",this.handleOptionChange.bind(this)),t.appendChild(e)})),this.initEvents(),this.initControls(),this.addStyle()}attributeChangedCallback(n,t,e){this.setupData(),this.render()}}const c=document.createElement("template");c.innerHTML='\n    <label class="form-control">\n        <div class="name">\n            <slot name="name"></slot>\n        </div>\n        <div class="value">\n            <input type="checkbox" />\n        </div>\n    </label>\n';class d extends HTMLElement{connectedCallback(){this.attachShadow({mode:"open"});try{this.option=JSON.parse(this.getAttribute("option"))}catch(n){this.option=void 0}this.render()}initEvents(){this.shadowRoot.querySelector("input").addEventListener("change",(n=>{this.handleChange(n.target.checked)}))}handleChange(n){this.dispatchEvent(new CustomEvent("change",{detail:Object.assign(Object.assign({},this.option),{value:n}),composed:!0}))}addStyle(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n    .app {\n        border: 1px dotted #0ff;\n    }\n    ",this.shadowRoot.appendChild(n)}render(){if(this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(c.content.cloneNode(!0)),this.option){this.shadowRoot.querySelector('slot[name="name"]').innerHTML=this.option.type.name;const n=this.shadowRoot.querySelector("input");this.option.value?n.setAttribute("checked","true"):n.removeAttribute("checked")}this.initEvents(),this.addStyle()}attributeChangedCallback(n,t,e){}}const p=document.createElement("template");p.innerHTML='\n    <label class="form-control">\n        <div class="name">\n            <slot name="name"></slot>\n        </div>\n        <div class="value">\n            <select value=""></select>\n        </div>\n    </label>\n';class u extends HTMLElement{connectedCallback(){this.attachShadow({mode:"open"});try{this.option=JSON.parse(this.getAttribute("option"))}catch(n){this.option=void 0}this.render()}initEvents(){this.shadowRoot.querySelector("select").addEventListener("change",(n=>{this.handleChange(n.target.value)}))}handleChange(n){this.dispatchEvent(new CustomEvent("change",{detail:Object.assign(Object.assign({},this.option),{value:{value:n}}),composed:!0}))}addStyle(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n    .app {\n        border: 1px dotted #0ff;\n    }\n    ",this.shadowRoot.appendChild(n)}render(){if(this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(p.content.cloneNode(!0)),this.option){this.shadowRoot.querySelector('slot[name="name"]').innerHTML=this.option.type.name;const n=this.shadowRoot.querySelector("select");n.value=this.option.value.value;const t=document.createElement("option");t.value="",t.innerText="Not selected",n.appendChild(t),this.option.type.variants.forEach((t=>{const e=document.createElement("option");e.value=t.value,e.innerText=t.value,t.value===this.option.value.value?e.setAttribute("selected","true"):e.removeAttribute("selected"),n.appendChild(e)}))}this.initEvents(),this.addStyle()}attributeChangedCallback(n,t,e){console.log(n,t,e)}}const h=document.createElement("template");h.innerHTML='\n    <label class="form-control">\n        <div class="name">\n            <slot name="name"></slot>\n        </div>\n        <div class="value">\n            <input value="" />\n        </div>\n    </label>\n';class m extends HTMLElement{connectedCallback(){this.attachShadow({mode:"open"});try{this.option=JSON.parse(this.getAttribute("option"))}catch(n){this.option=void 0}this.render()}initEvents(){}handleChange(n){this.dispatchEvent(new CustomEvent("change",{detail:Object.assign(Object.assign({},this.option),{value:n}),composed:!0}))}addStyle(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n    ",this.shadowRoot.appendChild(n)}render(){if(this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(h.content.cloneNode(!0)),this.option){this.shadowRoot.querySelector('slot[name="name"]').innerHTML=this.option.type.name;const n=this.shadowRoot.querySelector("input");n.value=this.option.value,n.addEventListener("change",(n=>{this.handleChange(n.target.value)})),n.addEventListener("input",(n=>{this.handleChange(n.target.value)}))}this.initEvents(),this.addStyle()}attributeChangedCallback(n,t,e){}}const b=document.createElement("template");b.innerHTML='\n    <div class="item">\n        <div class="header" id="header">\n            #<slot name="id"></slot> <slot name="name"></slot>\n            <div>\n                <button id="edit-button" class="button button--type-secondary">Edit Configuration</button>\n                <button id="expand-toggler" class="button button--type-secondary">Hide/Show Details</button>\n            </div>\n        </div>\n        <div class="options">\n            <slot name="children"></slot>\n        </div>\n    </div>\n';class g extends HTMLElement{constructor(){super(...arguments),this.isOpened=!1}static get observedAttributes(){return["opened"]}connectedCallback(){this.attachShadow({mode:"open"}),this.configuration=JSON.parse(this.getAttribute("configuration")),this.isOpened="true"===this.getAttribute("opened"),this.render()}handleClickEdit(){this.dispatchEvent(new CustomEvent("click-edit",{detail:this.configuration,composed:!0})),this.isOpened||this.handleClickVisibility()}handleClickVisibility(){this.isOpened=!this.isOpened,this.dispatchEvent(new CustomEvent("toggle-visibility",{detail:{id:this.configuration.id,opened:this.isOpened},composed:!0})),this.render()}addEventListeners(){this.shadowRoot.getElementById("edit-button").addEventListener("click",this.handleClickEdit.bind(this)),this.shadowRoot.getElementById("expand-toggler").addEventListener("click",this.handleClickVisibility.bind(this))}setupStyles(){const n=document.createElement("style");n.textContent=function(n){return`\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n    .item {\n        border-bottom: 1px solid #ccc;\n        margin: 0;\n    }\n\n    .item:hover .header {\n        background-color: #ccc;\n    }\n\n    .header {\n        align-items: center;\n        background-color: #ddd;\n        border: 0;\n        color: #222;\n        display: flex;\n        justify-content: space-between;\n        padding: 4px 8px;\n        width: 100%;\n    }\n\n    .options {\n        background-color: #eee;\n        display: ${n.isOpened?"block":"none"};\n    }\n    `}({isOpened:this.isOpened}),this.shadowRoot.appendChild(n)}render(){this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(b.content.cloneNode(!0)),this.shadowRoot.querySelector('slot[name="id"]').innerHTML=this.configuration.id.toString(),this.shadowRoot.querySelector('slot[name="name"]').innerHTML=this.configuration.name;const n=this.shadowRoot.querySelector('slot[name="children"]');this.configuration.options.forEach((t=>{const e=document.createElement("configuration-option");e.setAttribute("option",JSON.stringify(t)),e.addEventListener("change",(n=>{console.log(n)})),n.appendChild(e)})),this.shadowRoot.getElementById("expand-toggler").innerHTML=this.isOpened?"Hide Details":"Show Details",this.setupStyles(),this.addEventListeners()}attachedCallback(){}attributeChangedCallback(n,t,e){console.log("attributeChangedCallback"),console.log(n,t,e)}}const f=document.createElement("template");f.innerHTML='\n    <div class="list">\n        <slot name="children"></slot>\n    </div>\n';class y extends HTMLElement{constructor(){super(...arguments),this.configurations=[],this.optionsTypes=[],this.state={openedItems:new Set}}static get observedAttributes(){return["configurations"]}connectedCallback(){this.attachShadow({mode:"open"}),this.name=this.getAttribute("name"),this.configurations=JSON.parse(this.getAttribute("configurations")),this.optionsTypes=JSON.parse(this.getAttribute("optionsTypes")),this.render()}addStyle(){const n=document.createElement("style");n.textContent="\n  \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n  .list {\n    border: 1px solid #999;\n    border-radius: 2px;\n    margin: 0 0 16px;\n  }\n  ",this.shadowRoot.appendChild(n)}handleEditClick(n){this.dispatchEvent(new CustomEvent(n.type,{detail:n.detail,composed:!0}))}handleToggleVisibilityClick(n){this.state.openedItems.has(n.detail.id)?this.state.openedItems.delete(n.detail.id):this.state.openedItems.add(n.detail.id)}render(){if(!this.shadowRoot)return;this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(f.content.cloneNode(!0)),this.addStyle();const n=this.shadowRoot.querySelector('slot[name="children"]');this.configurations.forEach((t=>{const e=document.createElement("configuration-item");e.setAttribute("configuration",JSON.stringify(t)),e.setAttribute("opened",this.state.openedItems.has(t.id)?"true":"false"),e.addEventListener("click-edit",this.handleEditClick.bind(this)),e.addEventListener("toggle-visibility",this.handleToggleVisibilityClick.bind(this)),n.appendChild(e)}))}attributeChangedCallback(n,t,e){"configurations"===n&&(this.configurations=JSON.parse(e)),this.render()}}const v=document.createElement("template");v.innerHTML='\n    <div class="item">\n        <div class="name">\n            <slot name="name"></slot>\n        </div>\n        <div class="value">\n            <slot name="value"></slot>\n        </div>\n    </div>\n';class C extends HTMLElement{connectedCallback(){this.attachShadow({mode:"open"}),this.option=JSON.parse(this.getAttribute("option")),this.render()}addStyle(){const n=document.createElement("style");n.textContent="\n  \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n\n  .item {\n    display: flex;\n    justify-content: center;\n  }\n\n  .name {\n    padding: 0 0.5rem 0 0;\n    text-align: right;\n    width: 50%;\n  }\n\n  .value {\n    padding: 0 0 0 0.5rem;\n    text-align: left;\n    width: 50%;\n  }\n  ",this.shadowRoot.appendChild(n)}render(){this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(v.content.cloneNode(!0)),this.shadowRoot.querySelector('slot[name="name"]').innerHTML=this.option.type.name;const n=this.shadowRoot.querySelector('slot[name="value"]');switch(this.option.type.type){case"checkbox":n.innerHTML=this.option.value?"Да":"Нет";break;case"select":n.innerHTML=this.option.value.value;break;case"text":n.innerHTML=this.option.value.toString()}this.addStyle()}}const x=document.createElement("template");x.innerHTML='\n    <div>\n        <h3>New Configuration Option</h3>\n        <form>\n            <label class="form-control">\n                <div class="name">\n                    Name\n                </div>\n                <div class="value">\n                    <input name="name" value="" />\n                </div>\n            </label>\n\n            <label class="form-control">\n                <div class="name">\n                    Type\n                </div>\n                <div class="value">\n                    <select name="type">\n                        <option value="text">Текст</option>\n                        <option value="checkbox">Чекбокс</option>\n                        <option value="select">Выпадающий список</option>\n                    </select>\n                </div>\n            </label>\n\n            <label class="form-control" id="variants">\n                <div class="name">\n                    Варианты\n                </div>\n                <div class="value">\n                    <input name="variants" value="" />\n                </div>\n            </label>\n\n            <button id="save-button" type="submit" class="button button--type-primary">\n                + Save\n            </button>\n\n            <button id="cancel-button" type="button" class="button button--type-secondary">\n                Cancel\n            </button>\n        </form>\n    </div>\n';class w extends HTMLElement{constructor(){super(...arguments),this.optionType={id:void 0,type:"text",name:"Option Type",defaultValue:"",variants:[]},this.controls={buttonCancel:void 0,form:void 0,name:void 0,type:void 0,variants:void 0,variantsWrapper:void 0}}static get observedAttributes(){return["visible"]}connectedCallback(){this.attachShadow({mode:"open"}),this.render()}handleNameChange(n){this.optionType.name=n.target.value}handleTypeChange(n){this.optionType.type=n.target.value,console.log(n.target.value),this.render()}handleOptionChange(n){this.dispatchEvent(new CustomEvent("configuration-option-change",{detail:n.detail,composed:!0}))}handleSubmit(n){this.dispatchEvent(new CustomEvent("save",{detail:Object.assign(Object.assign(Object.assign(Object.assign({},n),"checkbox"===n.type?{defaultValue:!1}:{}),"text"===n.type?{defaultValue:""}:{}),"select"===n.type?{defaultValue:{value:""}}:{}),composed:!0})),this.dispatchEvent(new CustomEvent("cancel",{composed:!0}))}initControls(){this.controls={buttonCancel:this.shadowRoot.querySelector("#cancel-button"),name:this.shadowRoot.querySelector('input[name="name"]'),variants:this.shadowRoot.querySelector('input[name="variants"]'),variantsWrapper:this.shadowRoot.querySelector("#variants"),type:this.shadowRoot.querySelector('select[name="type"]'),form:this.shadowRoot.querySelector("form")},this.controls.form.addEventListener("submit",(n=>{n.preventDefault(),this.handleSubmit(this.optionType)})),this.controls.name.addEventListener("change",this.handleNameChange.bind(this)),this.controls.type.addEventListener("change",this.handleTypeChange.bind(this)),this.controls.buttonCancel.addEventListener("click",(()=>{this.dispatchEvent(new CustomEvent("cancel",{composed:!0}))}))}addStyle(){const n=document.createElement("style");n.textContent="\n    \n* {\n    box-sizing: border-box;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.button {\n    border-radius: 2px;\n    cursor: pointer;\n    padding: 4px 8px;\n    text-transform: capitalize;\n}\n\n.button--type-primary {\n    background-color: rgb(15, 79, 143);\n    border: 1px solid rgb(9, 58, 113);\n    color: #eee;\n}\n\n.button--type-primary:hover {\n    background-color: rgb(37 118 189);\n}\n\n.button--type-secondary {\n    background-color: rgb(250, 250, 250);\n    border: 1px solid rgb(9, 58, 113);\n    color: rgb(15, 79, 143);\n}\n\n.button--type-secondary:hover {\n    background-color: rgb(238, 238, 238);\n}\n\n.form-control {\n    display: flex;\n    margin: 0 0 0.4rem 0;\n}\n\n.form-control .name {\n    width: 40%;\n}\n\n.form-control .value {\n    width: 60%;\n}\n\n.form-control .value input,\n.form-control .value select {\n    display: block;\n    width: 100%;\n}\n\n    ",this.shadowRoot.appendChild(n)}render(){this.optionType&&this.shadowRoot&&(this.shadowRoot.innerHTML="",this.shadowRoot.appendChild(x.content.cloneNode(!0)),this.initControls(),this.controls.name.value=this.optionType.name,this.controls.type.value=this.optionType.type,"select"===this.optionType.type?this.controls.variantsWrapper.style.display="":this.controls.variantsWrapper.style.display="none",console.log(this.optionType),this.addStyle())}attributeChangedCallback(n,t,e){}}var E=e(379),k=e.n(E),S=e(795),T=e.n(S),L=e(569),O=e.n(L),R=e(565),A=e.n(R),H=e(216),M=e.n(H),N=e(589),q=e.n(N),j=e(759),I={};I.styleTagTransform=q(),I.setAttributes=A(),I.insert=O().bind(null,"head"),I.domAPI=T(),I.insertStyleElement=M(),k()(j.Z,I),j.Z&&j.Z.locals&&j.Z.locals;try{customElements.define("test-app",r),customElements.define("configuration-form-option-checkbox",d),customElements.define("configuration-form-option-select",u),customElements.define("configuration-form-option-text",m),customElements.define("configuration-form",l),customElements.define("configuration-item",g),customElements.define("configuration-list",y),customElements.define("configuration-option",C),customElements.define("configuration-optiontype-form",w)}catch(n){console.warn(n);const t=document.createElement("h2");t.innerText="This browser doesnt supports web components",document.body.appendChild(t)}}},n=>{n(n.s=207)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,